/* Generated By:JavaCC: Do not edit this line. ErrorParserTokenManager.java */
package dods.dap.parser;

public class ErrorParserTokenManager implements ErrorParserConstants {
  public java.io.PrintStream debugStream = System.out;

  public void setDebugStream(java.io.PrintStream ds) {
    debugStream = ds;
  }

  private final int jjStopAtPos(int pos, int kind) {
    jjmatchedKind = kind;
    jjmatchedPos = pos;
    return pos + 1;
  }

  private final int jjMoveStringLiteralDfa0_0() {
    switch (curChar) {
      case 59:
        return jjStopAtPos(0, 18);
      case 61:
        return jjStopAtPos(0, 19);
      case 123:
        return jjStopAtPos(0, 16);
      case 125:
        return jjStopAtPos(0, 17);
      default:
        return jjMoveNfa_0(0, 0);
    }
  }

  private final void jjCheckNAdd(int state) {
    if (jjrounds[state] != jjround) {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
    }
  }

  private final void jjAddStates(int start, int end) {
    do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
    } while (start++ != end);
  }

  private final void jjCheckNAddTwoStates(int state1, int state2) {
    jjCheckNAdd(state1);
    jjCheckNAdd(state2);
  }

  private final void jjCheckNAddStates(int start, int end) {
    do {
      jjCheckNAdd(jjnextStates[start]);
    } while (start++ != end);
  }

  static final long[] jjbitVec0 = {0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL};

  private final int jjMoveNfa_0(int startState, int curPos) {
    int[] nextStates;
    int startsAt = 0;
    jjnewStateCnt = 114;
    int i = 1;
    jjstateSet[0] = startState;
    int j, kind = 0x7fffffff;
    for (; ; ) {
      if (++jjround == 0x7fffffff) ReInitRounds();
      if (curChar < 64) {
        long l = 1L << curChar;
        do {
          switch (jjstateSet[--i]) {
            case 0:
              if ((0x7ffeb2000000000L & l) != 0L) {
                if (kind > 12) kind = 12;
                jjCheckNAdd(19);
              } else if (curChar == 34) {
                if (kind > 15) kind = 15;
                jjCheckNAddStates(0, 4);
              } else if (curChar == 35) {
                if (kind > 5) kind = 5;
                jjCheckNAdd(1);
              }
              if ((0x3ff000000000000L & l) != 0L) {
                if (kind > 11) kind = 11;
                jjCheckNAdd(18);
              }
              break;
            case 1:
              if ((0xffffffffffffdbffL & l) == 0L) break;
              if (kind > 5) kind = 5;
              jjCheckNAdd(1);
              break;
            case 18:
              if ((0x3ff000000000000L & l) == 0L) break;
              if (kind > 11) kind = 11;
              jjCheckNAdd(18);
              break;
            case 19:
              if ((0x7ffeb2000000000L & l) == 0L) break;
              if (kind > 12) kind = 12;
              jjCheckNAdd(19);
              break;
            case 64:
              if (curChar != 34) break;
              if (kind > 15) kind = 15;
              jjCheckNAddStates(0, 4);
              break;
            case 65:
              if ((0xfffffffbffffffffL & l) != 0L) jjCheckNAddStates(5, 7);
              break;
            case 66:
              if (curChar == 34) jjCheckNAddStates(5, 7);
              break;
            case 68:
              if (curChar == 34 && kind > 12) kind = 12;
              break;
            case 69:
              if ((0xfffffffbffffffffL & l) == 0L) break;
              if (kind > 15) kind = 15;
              jjCheckNAddTwoStates(69, 71);
              break;
            case 70:
              if (curChar != 34) break;
              if (kind > 15) kind = 15;
              jjCheckNAddTwoStates(69, 71);
              break;
            default:
              break;
          }
        } while (i != startsAt);
      } else if (curChar < 128) {
        long l = 1L << (curChar & 077);
        do {
          switch (jjstateSet[--i]) {
            case 0:
              if ((0x7fffffe97fffffeL & l) != 0L) {
                if (kind > 12) kind = 12;
                jjCheckNAdd(19);
              }
              if (curChar == 80) jjAddStates(8, 12);
              else if (curChar == 112) jjAddStates(13, 14);
              else if (curChar == 69) jjAddStates(15, 16);
              else if (curChar == 67) jjAddStates(17, 18);
              else if (curChar == 77) jjAddStates(19, 20);
              else if (curChar == 109) jjstateSet[jjnewStateCnt++] = 16;
              else if (curChar == 99) jjstateSet[jjnewStateCnt++] = 9;
              else if (curChar == 101) jjstateSet[jjnewStateCnt++] = 5;
              break;
            case 1:
              if (kind > 5) kind = 5;
              jjstateSet[jjnewStateCnt++] = 1;
              break;
            case 2:
              if (curChar == 114 && kind > 6) kind = 6;
              break;
            case 3:
            case 39:
              if (curChar == 111) jjCheckNAdd(2);
              break;
            case 4:
              if (curChar == 114) jjstateSet[jjnewStateCnt++] = 3;
              break;
            case 5:
              if (curChar == 114) jjstateSet[jjnewStateCnt++] = 4;
              break;
            case 6:
              if (curChar == 101) jjstateSet[jjnewStateCnt++] = 5;
              break;
            case 7:
              if (curChar == 101 && kind > 7) kind = 7;
              break;
            case 8:
            case 33:
              if (curChar == 100) jjCheckNAdd(7);
              break;
            case 9:
              if (curChar == 111) jjstateSet[jjnewStateCnt++] = 8;
              break;
            case 10:
              if (curChar == 99) jjstateSet[jjnewStateCnt++] = 9;
              break;
            case 11:
              if (curChar == 101 && kind > 8) kind = 8;
              break;
            case 12:
            case 21:
              if (curChar == 103) jjCheckNAdd(11);
              break;
            case 13:
              if (curChar == 97) jjstateSet[jjnewStateCnt++] = 12;
              break;
            case 14:
              if (curChar == 115) jjstateSet[jjnewStateCnt++] = 13;
              break;
            case 15:
              if (curChar == 115) jjstateSet[jjnewStateCnt++] = 14;
              break;
            case 16:
              if (curChar == 101) jjstateSet[jjnewStateCnt++] = 15;
              break;
            case 17:
              if (curChar == 109) jjstateSet[jjnewStateCnt++] = 16;
              break;
            case 19:
              if ((0x7fffffe97fffffeL & l) == 0L) break;
              if (kind > 12) kind = 12;
              jjCheckNAdd(19);
              break;
            case 20:
              if (curChar == 77) jjAddStates(19, 20);
              break;
            case 22:
              if (curChar == 97) jjstateSet[jjnewStateCnt++] = 21;
              break;
            case 23:
              if (curChar == 115) jjstateSet[jjnewStateCnt++] = 22;
              break;
            case 24:
              if (curChar == 115) jjstateSet[jjnewStateCnt++] = 23;
              break;
            case 25:
              if (curChar == 101) jjstateSet[jjnewStateCnt++] = 24;
              break;
            case 26:
              if (curChar == 69 && kind > 8) kind = 8;
              break;
            case 27:
              if (curChar == 71) jjstateSet[jjnewStateCnt++] = 26;
              break;
            case 28:
              if (curChar == 65) jjstateSet[jjnewStateCnt++] = 27;
              break;
            case 29:
              if (curChar == 83) jjstateSet[jjnewStateCnt++] = 28;
              break;
            case 30:
              if (curChar == 83) jjstateSet[jjnewStateCnt++] = 29;
              break;
            case 31:
              if (curChar == 69) jjstateSet[jjnewStateCnt++] = 30;
              break;
            case 32:
              if (curChar == 67) jjAddStates(17, 18);
              break;
            case 34:
              if (curChar == 111) jjstateSet[jjnewStateCnt++] = 33;
              break;
            case 35:
              if (curChar == 69 && kind > 7) kind = 7;
              break;
            case 36:
              if (curChar == 68) jjstateSet[jjnewStateCnt++] = 35;
              break;
            case 37:
              if (curChar == 79) jjstateSet[jjnewStateCnt++] = 36;
              break;
            case 38:
              if (curChar == 69) jjAddStates(15, 16);
              break;
            case 40:
              if (curChar == 114) jjstateSet[jjnewStateCnt++] = 39;
              break;
            case 41:
              if (curChar == 114) jjstateSet[jjnewStateCnt++] = 40;
              break;
            case 42:
              if (curChar == 82 && kind > 6) kind = 6;
              break;
            case 43:
              if (curChar == 79) jjstateSet[jjnewStateCnt++] = 42;
              break;
            case 44:
              if (curChar == 82) jjstateSet[jjnewStateCnt++] = 43;
              break;
            case 45:
              if (curChar == 82) jjstateSet[jjnewStateCnt++] = 44;
              break;
            case 46:
              if (curChar == 112) jjAddStates(13, 14);
              break;
            case 47:
              if (curChar == 101 && kind > 9) kind = 9;
              break;
            case 48:
            case 73:
            case 93:
              if (curChar == 112) jjCheckNAdd(47);
              break;
            case 49:
              if (curChar == 121) jjstateSet[jjnewStateCnt++] = 48;
              break;
            case 50:
              if (curChar == 116) jjstateSet[jjnewStateCnt++] = 49;
              break;
            case 51:
              if (curChar == 95) jjstateSet[jjnewStateCnt++] = 50;
              break;
            case 52:
              if (curChar == 109) jjstateSet[jjnewStateCnt++] = 51;
              break;
            case 53:
              if (curChar == 97) jjstateSet[jjnewStateCnt++] = 52;
              break;
            case 54:
              if (curChar == 114) jjstateSet[jjnewStateCnt++] = 53;
              break;
            case 55:
              if (curChar == 103) jjstateSet[jjnewStateCnt++] = 54;
              break;
            case 56:
              if (curChar == 111) jjstateSet[jjnewStateCnt++] = 55;
              break;
            case 57:
              if (curChar == 114) jjstateSet[jjnewStateCnt++] = 56;
              break;
            case 58:
              if (curChar == 109 && kind > 10) kind = 10;
              break;
            case 59:
            case 103:
              if (curChar == 97) jjCheckNAdd(58);
              break;
            case 60:
              if (curChar == 114) jjstateSet[jjnewStateCnt++] = 59;
              break;
            case 61:
              if (curChar == 103) jjstateSet[jjnewStateCnt++] = 60;
              break;
            case 62:
              if (curChar == 111) jjstateSet[jjnewStateCnt++] = 61;
              break;
            case 63:
              if (curChar == 114) jjstateSet[jjnewStateCnt++] = 62;
              break;
            case 65:
              jjAddStates(5, 7);
              break;
            case 67:
              if (curChar == 92) jjstateSet[jjnewStateCnt++] = 66;
              break;
            case 69:
              if (kind > 15) kind = 15;
              jjAddStates(21, 22);
              break;
            case 71:
              if (curChar == 92) jjstateSet[jjnewStateCnt++] = 70;
              break;
            case 72:
              if (curChar == 80) jjAddStates(8, 12);
              break;
            case 74:
              if (curChar == 121) jjstateSet[jjnewStateCnt++] = 73;
              break;
            case 75:
              if (curChar == 84) jjstateSet[jjnewStateCnt++] = 74;
              break;
            case 76:
              if (curChar == 109) jjstateSet[jjnewStateCnt++] = 75;
              break;
            case 77:
              if (curChar == 97) jjstateSet[jjnewStateCnt++] = 76;
              break;
            case 78:
              if (curChar == 114) jjstateSet[jjnewStateCnt++] = 77;
              break;
            case 79:
              if (curChar == 103) jjstateSet[jjnewStateCnt++] = 78;
              break;
            case 80:
              if (curChar == 111) jjstateSet[jjnewStateCnt++] = 79;
              break;
            case 81:
              if (curChar == 114) jjstateSet[jjnewStateCnt++] = 80;
              break;
            case 82:
              if (curChar == 69 && kind > 9) kind = 9;
              break;
            case 83:
              if (curChar == 80) jjstateSet[jjnewStateCnt++] = 82;
              break;
            case 84:
              if (curChar == 89) jjstateSet[jjnewStateCnt++] = 83;
              break;
            case 85:
              if (curChar == 84) jjstateSet[jjnewStateCnt++] = 84;
              break;
            case 86:
              if (curChar == 95) jjstateSet[jjnewStateCnt++] = 85;
              break;
            case 87:
              if (curChar == 77) jjstateSet[jjnewStateCnt++] = 86;
              break;
            case 88:
              if (curChar == 65) jjstateSet[jjnewStateCnt++] = 87;
              break;
            case 89:
              if (curChar == 82) jjstateSet[jjnewStateCnt++] = 88;
              break;
            case 90:
              if (curChar == 71) jjstateSet[jjnewStateCnt++] = 89;
              break;
            case 91:
              if (curChar == 79) jjstateSet[jjnewStateCnt++] = 90;
              break;
            case 92:
              if (curChar == 82) jjstateSet[jjnewStateCnt++] = 91;
              break;
            case 94:
              if (curChar == 121) jjstateSet[jjnewStateCnt++] = 93;
              break;
            case 95:
              if (curChar == 84) jjstateSet[jjnewStateCnt++] = 94;
              break;
            case 96:
              if (curChar == 95) jjstateSet[jjnewStateCnt++] = 95;
              break;
            case 97:
              if (curChar == 109) jjstateSet[jjnewStateCnt++] = 96;
              break;
            case 98:
              if (curChar == 97) jjstateSet[jjnewStateCnt++] = 97;
              break;
            case 99:
              if (curChar == 114) jjstateSet[jjnewStateCnt++] = 98;
              break;
            case 100:
              if (curChar == 103) jjstateSet[jjnewStateCnt++] = 99;
              break;
            case 101:
              if (curChar == 111) jjstateSet[jjnewStateCnt++] = 100;
              break;
            case 102:
              if (curChar == 114) jjstateSet[jjnewStateCnt++] = 101;
              break;
            case 104:
              if (curChar == 114) jjstateSet[jjnewStateCnt++] = 103;
              break;
            case 105:
              if (curChar == 103) jjstateSet[jjnewStateCnt++] = 104;
              break;
            case 106:
              if (curChar == 111) jjstateSet[jjnewStateCnt++] = 105;
              break;
            case 107:
              if (curChar == 114) jjstateSet[jjnewStateCnt++] = 106;
              break;
            case 108:
              if (curChar == 77 && kind > 10) kind = 10;
              break;
            case 109:
              if (curChar == 65) jjstateSet[jjnewStateCnt++] = 108;
              break;
            case 110:
              if (curChar == 82) jjstateSet[jjnewStateCnt++] = 109;
              break;
            case 111:
              if (curChar == 71) jjstateSet[jjnewStateCnt++] = 110;
              break;
            case 112:
              if (curChar == 79) jjstateSet[jjnewStateCnt++] = 111;
              break;
            case 113:
              if (curChar == 82) jjstateSet[jjnewStateCnt++] = 112;
              break;
            default:
              break;
          }
        } while (i != startsAt);
      } else {
        int i2 = (curChar & 0xff) >> 6;
        long l2 = 1L << (curChar & 077);
        do {
          switch (jjstateSet[--i]) {
            case 1:
              if ((jjbitVec0[i2] & l2) == 0L) break;
              if (kind > 5) kind = 5;
              jjstateSet[jjnewStateCnt++] = 1;
              break;
            case 65:
              if ((jjbitVec0[i2] & l2) != 0L) jjAddStates(5, 7);
              break;
            case 69:
              if ((jjbitVec0[i2] & l2) == 0L) break;
              if (kind > 15) kind = 15;
              jjAddStates(21, 22);
              break;
            default:
              break;
          }
        } while (i != startsAt);
      }
      if (kind != 0x7fffffff) {
        jjmatchedKind = kind;
        jjmatchedPos = curPos;
        kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 114 - (jjnewStateCnt = startsAt))) return curPos;
      try {
        curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
        return curPos;
      }
    }
  }

  static final int[] jjnextStates = {
    65, 67, 68, 69, 71, 65, 67, 68, 81, 92, 102, 107, 113, 57, 63, 41, 45, 34, 37, 25, 31, 69, 71,
  };
  public static final String[] jjstrLiteralImages = {
    "", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
    "\173", "\175", "\73", "\75",
  };
  public static final String[] lexStateNames = {
    "DEFAULT",
  };
  static final long[] jjtoToken = {
    0xf9fc1L,
  };
  static final long[] jjtoSkip = {
    0x3eL,
  };
  private SimpleCharStream input_stream;
  private final int[] jjrounds = new int[114];
  private final int[] jjstateSet = new int[228];
  protected char curChar;

  public ErrorParserTokenManager(SimpleCharStream stream) {
    if (SimpleCharStream.staticFlag)
      throw new Error(
          "ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
    input_stream = stream;
  }

  public ErrorParserTokenManager(SimpleCharStream stream, int lexState) {
    this(stream);
    SwitchTo(lexState);
  }

  public void ReInit(SimpleCharStream stream) {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private final void ReInitRounds() {
    int i;
    jjround = 0x80000001;
    for (i = 114; i-- > 0; ) jjrounds[i] = 0x80000000;
  }

  public void ReInit(SimpleCharStream stream, int lexState) {
    ReInit(stream);
    SwitchTo(lexState);
  }

  public void SwitchTo(int lexState) {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError(
          "Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
          TokenMgrError.INVALID_LEXICAL_STATE);
    else curLexState = lexState;
  }

  private final Token jjFillToken() {
    Token t = Token.newToken(jjmatchedKind);
    t.kind = jjmatchedKind;
    String im = jjstrLiteralImages[jjmatchedKind];
    t.image = (im == null) ? input_stream.GetImage() : im;
    t.beginLine = input_stream.getBeginLine();
    t.beginColumn = input_stream.getBeginColumn();
    t.endLine = input_stream.getEndLine();
    t.endColumn = input_stream.getEndColumn();
    return t;
  }

  int curLexState = 0;
  int defaultLexState = 0;
  int jjnewStateCnt;
  int jjround;
  int jjmatchedPos;
  int jjmatchedKind;

  public final Token getNextToken() {
    int kind;
    Token specialToken = null;
    Token matchedToken;
    int curPos = 0;

    EOFLoop:
    for (; ; ) {
      try {
        curChar = input_stream.BeginToken();
      } catch (java.io.IOException e) {
        jjmatchedKind = 0;
        matchedToken = jjFillToken();
        return matchedToken;
      }

      try {
        input_stream.backup(0);
        while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
          curChar = input_stream.BeginToken();
      } catch (java.io.IOException e1) {
        continue EOFLoop;
      }
      jjmatchedKind = 0x7fffffff;
      jjmatchedPos = 0;
      curPos = jjMoveStringLiteralDfa0_0();
      if (jjmatchedKind != 0x7fffffff) {
        if (jjmatchedPos + 1 < curPos) input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
          matchedToken = jjFillToken();
          return matchedToken;
        } else {
          continue EOFLoop;
        }
      }
      int error_line = input_stream.getEndLine();
      int error_column = input_stream.getEndColumn();
      String error_after = null;
      boolean EOFSeen = false;
      try {
        input_stream.readChar();
        input_stream.backup(1);
      } catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
          error_line++;
          error_column = 0;
        } else error_column++;
      }
      if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
      }
      throw new TokenMgrError(
          EOFSeen,
          curLexState,
          error_line,
          error_column,
          error_after,
          curChar,
          TokenMgrError.LEXICAL_ERROR);
    }
  }
}
